#!/usr/bin/env python3

from ctypes import *
from io import BytesIO
from glob import glob


class DirectoryEntry(Structure):
    _fields_ = (
        ('ino', c_uint32),
        ('fname', c_char * 28),
    )


class Directory(Structure):
    _fields_ = (
        ('entry', DirectoryEntry * 16),
    )


class SuperBlock(Structure):
    _fields_ = (
        ('nfree', c_uint32),
        ('ninode', c_uint32),
        ('rootdir', c_uint32),
        ('kernel', c_uint32),
        ('freeblock', c_uint32),
        ('inodeblock', c_uint32),
        ('pad', c_uint32 * 122)
    )


class Dinode(Structure):
    _fields_ = (
        ('type', c_uint16),  # dir = 1, file = 2
        ('uid', c_uint16),
        ('gid', c_uint16),
        ('mode', c_uint16),
        ('nlink', c_uint32),
        ('size', c_uint32),
        ('addr', c_uint32 * 124),
    )


class FreeBlock(Structure):
    _fields_ = (
        ('blockno', c_uint32 * 127),
        ('next', c_uint32),
    )

Blocks = [b''] * 8192


def ialloc(data):
    if len(data) != 512:
        print("invalid inode data")

    for i in range(2, 2048):
        if not Blocks[i]:
            Blocks[i] = data
            return i
    print("ialloc error.")
    return None


def balloc(data):
    frame = b'\x00' * 512
    memmove(frame, data, len(data))

    for i in range(2048, 8192):
        if not Blocks[i]:
            Blocks[i] = frame
            return i
    print("balloc error.")
    return None

def __setup(mgr, lst, nextb):
    b = FreeBlock()
    for i in range(len(lst)):
        b.blockno[i] = lst[i]
    b.next = nextb
    Blocks[mgr] = bytes(b)

def _setup(freelist):
    loopn = (len(freelist) + 127) // 128 # 127 blocks + 1 mgr block
    for i in range(loopn):
        if i+1 == loopn: # last
            __setup(freelist[i*128], freelist[i*128+1:(i+1)*128], 0)
        else:
            __setup(freelist[i*128], freelist[i*128+1:(i+1)*128], freelist[(i+1)*128])

def bsetup():
    freelist = [i+2048 for i,b in enumerate(Blocks[2048:8192]) if not b]
    _setup(freelist)
    return freelist[0]


def isetup():
    freelist = [i+2 for i,b in enumerate(Blocks[2:2048]) if not b]
    _setup(freelist)
    return freelist[0]

def setkernel():
    kernel = open('build/kernel', 'rb').read()
    blocksize = (len(kernel) + 511) // 512
    lst = []
    for i in range(blocksize):
        blockno = balloc(kernel[i*512:(i+1)*512])
        lst.append(blockno)
    return lst[0]

class Files():

    def __init__(self, path):
        self.name = path.split('/')[-1][1:]
        self.data = open(path, 'rb').read()
        self.blocksize = (len(self.data) + 511) // 512
        self.blocks = []
        self.inum = 0

        if self.blocksize > 124:
            print("%s: this file is too large." % path)

        self.write()

    def fwrite(self):
        for i in range(self.blocksize):
            blockno = balloc(self.data[i*512:(i+1)*512])
            self.blocks.append(blockno)
    
    def iwrite(self):
        inode = Dinode(2, 0, 0, 0x755, 1, len(self.data))
        for i, bn in enumerate(self.blocks):
            inode.addr[i] = bn
        self.inum = ialloc(bytes(inode))
        print("%s %d %d" % (self.name, self.inum, inode.size))

    def write(self):
        self.fwrite()
        self.iwrite()

def main():
    superfs = SuperBlock()
    superfs.kernel = setkernel()
    files = [Files(f) for f in glob('build/_*')]

    # make rootdir
    rootino = Dinode(1, 0, 0, 0x755, 1, 512)
    rootdir = Directory()

    # add files
    for i, f in enumerate(files):
        rootdir.entry[i].ino = f.inum
        rootdir.entry[i].fname = f.name.encode()
    rootino.addr[0] = balloc(bytes(rootdir))

    superfs.rootdir = ialloc(bytes(rootino))
    superfs.freeblock = bsetup()
    superfs.inodeblock = isetup()
    superfs.nfree = 127
    superfs.ninode = 127

    Blocks[0] = open('build/bootblock', 'rb').read()
    Blocks[1] = bytes(superfs)

    fs = BytesIO()

    for b in Blocks:
        if not b:
            fs.write(b'\x00' * 512)
        else:
            fs.write(b)

    open('mixv6.img', 'wb').write(fs.getvalue())

if __name__ == '__main__':
    main()
